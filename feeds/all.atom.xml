<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title></title><link href="http://thierry.ducrest.net/" rel="alternate"></link><link href="http://feeds.thierry.ducrest.net/feeds/all.atom.xml" rel="self"></link><id>http://thierry.ducrest.net/</id><updated>2017-08-10T00:00:00+02:00</updated><entry><title>404</title><link href="http://thierry.ducrest.net/404.html" rel="alternate"></link><published>2017-08-10T00:00:00+02:00</published><author><name>Thierry Ducrest</name></author><id>tag:thierry.ducrest.net,2017-08-10:404.html</id><summary type="html">&lt;h2&gt;error 404&lt;/h2&gt;
&lt;p&gt;unknown around here, get on your way traveller.&lt;/p&gt;</summary></entry><entry><title>Error upgrading database with Alembic</title><link href="http://thierry.ducrest.net/error-upgrading-database-with-alembic.html" rel="alternate"></link><published>2016-11-12T00:00:00+01:00</published><author><name>Thierry Ducrest</name></author><id>tag:thierry.ducrest.net,2016-11-12:error-upgrading-database-with-alembic.html</id><summary type="html">&lt;p&gt;On my last project I started using &lt;a href="https://bitbucket.org/zzzeek/alembic/overview"&gt;Alembic&lt;/a&gt;  as a migration tool for the database, which is a new thing for me.&lt;br /&gt;
Before that I used to simply keep a file with the modifications applied to the developement database between each release version and patch the test and production datbase accordingly. Some of the drawbacks to this method are a risk of manipulation error and it is very difficult to reverse the changes when they are applied.&lt;/p&gt;
&lt;p&gt;Today while performing an upgrade on the production database running Postgresql with Alembic :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;alembic upgrade head
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I received the following error :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;...
ERROR &lt;span class="o"&gt;[&lt;/span&gt;alembic.util.messaging&lt;span class="o"&gt;]&lt;/span&gt; Online migration expected to match one row 
when updating &lt;span class="s1"&gt;&amp;#39;7b4f4b275d5b&amp;#39;&lt;/span&gt; to &lt;span class="s1"&gt;&amp;#39;cca4e32787e4&amp;#39;&lt;/span&gt; in &lt;span class="s1"&gt;&amp;#39;alembic_version&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; found
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Each database that Alembic work with has an "alembic_version" table, with one column, which contains the id of the current version of the database.&lt;/p&gt;
&lt;p&gt;In my database there was two rows in the table alembic_version both with the same value. As the table has no other column to differentiate the rows it is a little bit tricky to remove only one but this did the trick :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;DELETE&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;alembic_version&lt;/span&gt;
    &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;ctid&lt;/span&gt; &lt;span class="k"&gt;IN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;ctid&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;alembic_version&lt;/span&gt; &lt;span class="k"&gt;LIMIT&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I do not know why there was two entries in the table but removing one fixed the problem.&lt;/p&gt;</summary><category term="Python"></category><category term="Alembic"></category><category term="Database"></category></entry><entry><title>Using ImageMagick from a NodeJs application</title><link href="http://thierry.ducrest.net/using-imagemagick-from-a-nodejs-application.html" rel="alternate"></link><published>2016-10-30T00:00:00+02:00</published><author><name>Thierry Ducrest</name></author><id>tag:thierry.ducrest.net,2016-10-30:using-imagemagick-from-a-nodejs-application.html</id><summary type="html">&lt;p&gt;Lately when I needed to convert files from PDF to an image file format I was not surprised to find ImageMagick the best option for the job. I had used it before from the command line and knew to be a great piece of software.&lt;/p&gt;
&lt;p&gt;And naturally, when wanting to integrate that PDF to PNG conversion in my current NodeJs application, I searched npm for a module easing that integration. Faced with a lot of choices (that's what you get from 300'000 building blocks) I read the description of a handful, tried a couple and ended picking one to build my solution with.&lt;/p&gt;
&lt;p&gt;But later, I hit a bug. The module I chose, the bug I hit, are not relevant. I had moved my code in a Docker container, the operating system was different, my code was not running as expected and my PDF files were not converted correctly anymore.&lt;/p&gt;
&lt;p&gt;After looking a while for a solution without success. I made sure that ImageMagick in my container was working properly from the command line and decided to ditch the module I had chosen and implemented my own solution :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;spawn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;child_process&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// The arguments used to call convert from ImageMagick&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pdf:-&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-density&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;100&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;png:-&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;convert&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;convert&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Redirect any errors that may happen to the standard error&lt;/span&gt;
&lt;span class="nx"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Pipe in my pdf data&lt;/span&gt;
&lt;span class="nx"&gt;pdfDoc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myStream&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ah yes it'is not files that are converted but streams of data. Faster.&lt;/p&gt;
&lt;p&gt;And my solution works without another required module with it's own dependencies.&lt;/p&gt;</summary><category term="JavaScript"></category><category term="NodeJs"></category><category term="ImageMagick"></category></entry><entry><title>Managing locale with Linux and Python</title><link href="http://thierry.ducrest.net/managing-locale-with-linux-and-python.html" rel="alternate"></link><published>2016-09-20T00:00:00+02:00</published><author><name>Thierry Ducrest</name></author><id>tag:thierry.ducrest.net,2016-09-20:managing-locale-with-linux-and-python.html</id><summary type="html">&lt;p&gt;As far as I can remember I have always installed my operating systems to use the english language, maybe because I did not have the luxury of the choice before and it kind of feels more natural now.&lt;/p&gt;
&lt;p&gt;Lately I have had to print names (month, days) of the calendar in french using Python, so I dig a little in "locale", which are the set of parameters that configure the language and region settings used by the system.&lt;/p&gt;
&lt;p&gt;On Debian to get the list of "locale" installed&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;locale -a
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To choose which "locale" to make available on the system you can manually edit the file locale.gen by removing the # in front of the line you want activated, followed by the command to generate the modification :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo vim /etc/locale.gen
locale-gen
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Or simply run this configuration command :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo dpkg-reconfigure locales
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now that the correct "locale" is installed on the system, it is possible to display a date with the months and days in the desired language :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;locale&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime.date&lt;/span&gt;

&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;locale&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setlocale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;locale&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LC_ALL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fr_CH.utf8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt; %B %Y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Linux"></category><category term="Python"></category></entry><entry><title>Ajax request and blob content</title><link href="http://thierry.ducrest.net/ajax-request-blob-content.html" rel="alternate"></link><published>2016-09-06T00:00:00+02:00</published><author><name>Thierry Ducrest</name></author><id>tag:thierry.ducrest.net,2016-09-06:ajax-request-blob-content.html</id><summary type="html">&lt;p&gt;The web app I am building as a separate nodejs service than run for the sole purpose of generating pdf files for various content. That service does not have access to the database content but receive on each request the data that needs to be printed. And send back the binary data corresponding of the pdf file generated that will be offered to download to the user.&lt;/p&gt;
&lt;p&gt;The first version used a GET request but there is a limit with the length of the data that can be passed this way. The limit (between 2kb-5kb) varies from browser and server type and it is recommended not to use this method above 255 bytes.&lt;/p&gt;
&lt;p&gt;The switch to a POST request was not that straight forward, I could not understand why the pdf received by the client were always badly formed and unreadable. Turns out that the jquery ajax method does not support the blob format.&lt;/p&gt;
&lt;p&gt;This is &lt;a href="https://bugs.jquery.com/ticket/7248"&gt;the bug&lt;/a&gt; marked as won't fix&lt;/p&gt;
&lt;p&gt;All for the best it made me switch to XMLHttpRequest.&lt;/p&gt;</summary><category term="Web"></category><category term="HTTP"></category></entry></feed>