<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Thierry Ducrest</title><link href="http://thierry.ducrest.net/" rel="alternate"></link><link href="http://feeds.thierry.ducrest.net/feeds/all.atom.xml" rel="self"></link><id>http://thierry.ducrest.net/</id><updated>2016-09-20T00:00:00+02:00</updated><entry><title>Managing locale with Linux and Python</title><link href="http://thierry.ducrest.net/managing-locale-with-linux-and-python.html" rel="alternate"></link><published>2016-09-20T00:00:00+02:00</published><author><name>Thierry Ducrest</name></author><id>tag:thierry.ducrest.net,2016-09-20:managing-locale-with-linux-and-python.html</id><summary type="html">&lt;p&gt;As far as I can remember I have always installed my operating systems to use the english language, maybe because I did not have the luxury of the choice before and it kind of feels more natural now.&lt;/p&gt;
&lt;p&gt;Lately I have had to print names (month, days) of the calendar in french using Python, so I dig a little in "locale", which are the set of parameters that configure the language and region settings used by the system.&lt;/p&gt;
&lt;p&gt;On Debian to get the list of "locale" installed&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;locale -a
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To choose which "locale" to make available on the system you can manually edit the file locale.gen by removing the # in front of the line you want activated, followed by the command to generate the modification :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo vim /etc/locale.gen
locale-gen
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Or simply run this configuration command :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo dpkg-reconfigure locales
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now that the correct "locale" is installed on the system, it is possible to display a date with the months and days in the desired language :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;locale&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime.date&lt;/span&gt;

&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;locale&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setlocale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;locale&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LC_ALL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fr_CH.utf8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt; %B %Y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Linux"></category><category term="Python"></category></entry><entry><title>Ajax request and blob content</title><link href="http://thierry.ducrest.net/ajax-request-blob-content.html" rel="alternate"></link><published>2016-09-06T00:00:00+02:00</published><author><name>Thierry Ducrest</name></author><id>tag:thierry.ducrest.net,2016-09-06:ajax-request-blob-content.html</id><summary type="html">&lt;p&gt;The web app I am building as a separate nodejs service than run for the sole purpose of generating pdf files for various content. That service does not have access to the database content but receive on each request the data that needs to be printed. And send back the binary data corresponding of the pdf file generated that will be offered to download to the user.&lt;/p&gt;
&lt;p&gt;The first version used a GET request but there is a limit with the length of the data that can be passed this way. The limit (between 2kb-5kb) varies from browser and server type and it is recommended not to use this method above 255 bytes.&lt;/p&gt;
&lt;p&gt;The switch to a POST request was not that straight forward, I could not understand why the pdf received by the client were always badly formed and unreadable. Turns out that the jquery ajax method does not support the blob format.&lt;/p&gt;
&lt;p&gt;This is &lt;a href="https://bugs.jquery.com/ticket/7248"&gt;the bug&lt;/a&gt; marked as won't fix&lt;/p&gt;
&lt;p&gt;All for the best it made me switch to XMLHttpRequest.&lt;/p&gt;</summary><category term="Web"></category></entry><entry><title>Generating my first ssl certificate with letsencrypt</title><link href="http://thierry.ducrest.net/generating-first-ssl-certificate.html" rel="alternate"></link><published>2012-09-06T00:00:00+02:00</published><author><name>Thierry Ducrest</name></author><id>tag:thierry.ducrest.net,2012-09-06:generating-first-ssl-certificate.html</id><summary type="html">&lt;p&gt;This is the path I followed to generate a ssl certificate for sterna.ch using letsencrypt &lt;/p&gt;
&lt;p&gt;Sterna uses nginx as a webserver in a Docker container running Alpine linux.&lt;/p&gt;
&lt;p&gt;The recommended client software to use is certbot, which is actually packaged by Alpine linux to install : 
    apk add --no-cache certbot&lt;/p&gt;
&lt;p&gt;Certbot is used with "plugins" depending of the infrastructure targeted, unfortunately the nginx plugin is not ready yet, so using the webroot one.&lt;/p&gt;
&lt;p&gt;I had some problem getting certbot to work from the docker container getting a PythonDialogBug on execution. On way to get over it was to prefix the command with TERM=xterm {certbot cmd}
Or to had the text and non-interactive instruction in the config file.&lt;/p&gt;
&lt;p&gt;First test using the staging environement...
    certbot certonly --staging --config certif.ini&lt;/p&gt;
&lt;p&gt;Using a config file certif.ini :
    # The configuration file for certbot to get the ssl certificate for Sterna&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Use a 4096 bit RSA key instead of 2048
rsa-key-size = 4096

# Uncomment and update to register with the specified e-mail address
email = thierry@ducrest.net

# Uncomment and update to generate certificates for the specified
# domains.
domains = www.sterna.ch

# Uncomment to use a text interface instead of ncurses
text = True
#The following and the one above fix the problem PythonDialogBug that I had with Docker
non-interactive = True
agree-tos = True

# Uncomment to use the webroot authenticator. Replace webroot-path with the
# path to the public_html / webroot folder being served by your web server.
authenticator = webroot
webroot-path = /usr/html
# webroot-path = /usr/share/nginx/html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To test the ssl use : https://www.ssllabs.com/ssltest/ &lt;/p&gt;
&lt;p&gt;To finally generate a real certificate &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;certbot certonly --force-renewal --config certif.ini
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Got the ssl working. Only low point is I have to use a fix ip address otherwise a request pass to the reverse-proxy of the jelastic app engine and it is it that terminate the ssl communication and the common ssl certificate is used.
See if the custom ssl for Docker will be available soon ?! And I am not even sure that would help with a custom domain.&lt;/p&gt;</summary><category term="Web"></category></entry></feed>